DIR=$(cd $(dirname $0) ; pwd -P)

ISTIO_VERSION=1.1.1
#ISTIO_BRANCH=release-1.1

RELEASES_DIR=${DIR}/../../istio-releases

PLATFORM=linux
if [ -n "${ISTIO_VERSION}" ] ; then
  ISTIO_FILE="istio-${ISTIO_VERSION}-${PLATFORM}.tar.gz"
  ISTIO_URL="https://github.com/istio/istio/releases/download/${ISTIO_VERSION}/${ISTIO_FILE}"
  EXTRACT_CMD="tar -xvzf ${ISTIO_FILE}"
  RELEASE_DIR="${RELEASES_DIR}/istio-${ISTIO_VERSION}"
  ISTIO_NAME=istio-${ISTIO_VERSION}
else
  ISTIO_FILE="${ISTIO_BRANCH}.zip"
  ISTIO_URL="https://github.com/istio/istio/archive/${ISTIO_FILE}"
  EXTRACT_CMD="unzip ${ISTIO_FILE}"
  RELEASE_DIR="${RELEASES_DIR}/istio-${ISTIO_BRANCH}"
  ISTIO_NAME=istio-${ISTIO_BRANCH}
fi

ISTIO_NAME=${ISTIO_NAME//./-}

HELM_DIR=${RELEASE_DIR}/install/kubernetes/helm/
REDHAT_HELM_DIR=${DIR}

ROLE_FILES_DIR="${DIR}/../roles/openshift_istio/files/"

function retrieveIstioRelease() {
  if [ ! -d "${RELEASES_DIR}" ] ; then
    mkdir -p "${RELEASES_DIR}"
  fi

  if [ ! -f "${RELEASES_DIR}/${ISTIO_FILE}" ] ; then
    (
        cd "${RELEASES_DIR}"
        curl -LO "${ISTIO_URL}"
        ${EXTRACT_CMD}
        cp -rv "${DIR}/../istio/helm" "${RELEASE_DIR}/install/kubernetes"
        (
          cd "${RELEASE_DIR}/install/kubernetes/helm/istio"
          helm dep update
        )
    )
  fi
}

# The following modifications are made to the generated helm template for the Istio yaml files
# - remove the create customer resources job, we handle this in the installer to deal with potential races
# - remove the cleanup secrets job, we handle this in the installer
# - remove the kubernetes gateways
# - change privileged value on istio-proxy injection configmap to false
# - update the namespaceSelector to ignore namespaces with the label istio.openshift.com/ignore-namespace
# - add a maistra-version label to all objects which have a release label
# - remove GODEBUG from the pilot environment
# - remove istio-multi service account
# - remove istio-multi cluster role binding
# - remove istio-reader cluster role
# - switch prometheus init container image from busybox to prometheus
# - switch webhook ports to 8443
# - switch health check files into /tmp
function generateIstioTemplate() {
  VALUES=""
  while [ $# -gt 0 ] ; do
    VALUES="${VALUES} -f ${REDHAT_HELM_DIR}/$1"
    shift
  done

  helm template -n ${ISTIO_NAME} --namespace=istio-system ${VALUES} ${HELM_DIR}/istio | sed -e '/^# Source.*create-custom-resources-job.yaml/,/^# Source:/ {
    /^# Source/b
    d
  }' | sed -e '/^# Source:.*cleanup-secrets.yaml/,/^# Source:.*serviceaccount.yaml/ {
    /^# Source/b
    d
  }' | sed -e '/^# Source:.*pilot\/templates\/gateway.yaml/,/^# Source:/ {
    /^# Source/b
    d
  }' | sed -e '/^# Source:.*istio\/charts\/pilot\/templates\/deployment.yaml/,/^# Source:/ {
    /GODEBUG/ {
      N
      d
    }
  }' | sed -e '1,/privileged/! {
    /privileged/ s/true/false/
  }' | sed -e '/namespaceSelector/,/istio-injection/s/matchLabels/matchExpressions/' \
           -e 's/istio-injection: enabled/- {key: istio.openshift.com\/ignore-namespace, operator: DoesNotExist}/' \
           -e '/GODEBUG/,/gctrace/d' \
           -e 's/^\(.*\)release:\(.*\)$/\1maistra-version: MAISTRA_VERSION\
\1release:\2/' | \
   sed -e 's+gcr.io/istio-release+docker.io/istio+g' | \
   sed -e '/^# Source:.*istio\/templates\/serviceaccount.yaml/,/^# Source:/ {
    /^# Source/b
    d
  }' | sed -e '/^# Source:.*istio\/templates\/clusterrolebinding.yaml/,/^# Source:/ {
    /^# Source/b
    d
  }' | sed -e '/^# Source:.*istio\/templates\/clusterrole.yaml/,/^# Source:/ {
    /^# Source/b
    d
  }' | sed -e 's/busybox:[0-9.]*/docker.io\/prom\/prometheus:v2.3.1/' \
  | sed -e '/^# Source:.*istio\/charts\/galley\/templates\/service.yaml/,/^# Source:/ {
    s/^\(.*\)\(- port: 443.*\)$/\1\2\
\1  targetPort: webhook/
  }' | sed -e '/^# Source:.*istio\/charts\/galley\/templates\/deployment.yaml/,/^# Source:/ {
    s/^\(.*\)\- containerPort: 443.*$/\1- name: webhook\
\1  containerPort: 8443/
    s/\/health/\/tmp\/health/
    s/^\(.*\)\(- --monitoringPort.*\)$/\1\2\
\1- --validation-port=8443/
  }' | sed -e '/^# Source:.*istio\/charts\/sidecarInjectorWebhook\/templates\/service.yaml/,/^# Source:/ {
    s/^\(.*\)\(- port: 443.*\)$/\1\2\
\1  targetPort: webhook/
  }' | sed -e '/^# Source:.*istio\/charts\/sidecarInjectorWebhook\/templates\/deployment.yaml/,/^# Source:/ {
    s/\/health/HEALTH_CHECK_DIR\/health/
    s/^\(.*\)\(volumeMounts:.*\)$/\1  - --port=8443\
\1ports:\
\1- name: webhook\
\1  containerPort: 8443\
\1\2/
  }'
}

# The following modifications are made to the generated helm template to extract the CRDs
# - remove all content except for the crd configmaps
# - add maistra-version labels
function generateCRDsTemplate() {
  VALUES=""
  while [ $# -gt 0 ] ; do
    VALUES="${VALUES} -f ${REDHAT_HELM_DIR}/$1"
    shift
  done

  helm template -n ${ISTIO_NAME} --namespace=istio-system ${VALUES} ${HELM_DIR}/istio-init | sed -e 's/^# Source:\(.*istio-init\/templates\/configmap-crd-1\)/# SOURCE:\1/' \
 -e '/^# Source:/,/^---/d' \
     -e 's/^\(.*\)labels:$/\1labels:\
\1  maistra-version: MAISTRA_VERSION'/ \
 -e 's/^# SOURCE:/# Source:/' \
  | sed 's/^\(.*\)\(name: istio-crd-1.*\)$/\1\2\
\1labels:\
\1  maistra-version: MAISTRA_VERSION/'
}

# The following modifications are made to the generated helm template for the Grafana yaml file
# - add a service account for grafana
# - remove all non grafana configuration
# - remove the extraneous create custom resources job
# - add the service account to the deployment
# - add a maistra-version label to all objects which have a release label
function generateGrafanaTemplate() {
  VALUES=""
  while [ $# -gt 0 ] ; do
    VALUES="${VALUES} -f ${REDHAT_HELM_DIR}/$1"
    shift
  done

  (
    echo 'apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: istio-system
  labels:
    app: grafana' ;
    helm template -n ${ISTIO_NAME} --namespace=istio-system ${VALUES} ${HELM_DIR}/istio
  ) | sed -e 's/^# Source:/# MAISTRA:/' \
    | sed -e 's/^# MAISTRA: \(istio\/charts\/grafana\)/# Source: \1/' \
    | sed -e '/^# MAISTRA:/,/^# Source:/ {
      /^# Source/ b
      /^# MAISTRA/ b
      d
    }' | sed -e 's/^# MAISTRA:/# Source:/' \
    | sed -e '/^# Source:.*create-custom-resources-job.yaml/,/^# Source:/ {
      /^# Source/b
      d
    }' | sed -e 's/^\(.*\)containers:\(.*\)$/\1serviceAccountName: grafana\
\1containers:\2/' \
             -e 's/^\(.*\)release:\(.*\)$/\1maistra-version: MAISTRA_VERSION\
\1release:\2/'
}

# The following modifications are made to the generated helm template for the Kiali yaml file
# - remove all non kiali configuration
# - remove the kiali username/password secret
function generateKialiTemplate() {
  VALUES=""
  while [ $# -gt 0 ] ; do
    VALUES="${VALUES} -f ${REDHAT_HELM_DIR}/$1"
    shift
  done

  (
    echo 'apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kiali-viewer
  labels:
    app: kiali
rules:
- apiGroups: [""]
  resources:
  - configmaps
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  - replicationcontrollers
  - routes
  verbs:
  - get
  - list
  - watch
- apiGroups: ["extensions", "apps"]
  resources:
  - deployments
  - statefulsets
  - replicasets
  verbs:
  - get
  - list
  - watch
- apiGroups: ["autoscaling"]
  resources:
  - horizontalpodautoscalers
  verbs:
  - get
  - list
  - watch
- apiGroups: ["batch"]
  resources:
  - cronjobs
  - jobs
  verbs:
  - get
  - list
  - watch
- apiGroups: ["config.istio.io"]
  resources:
  - apikeys
  - authorizations
  - checknothings
  - circonuses
  - deniers
  - fluentds
  - handlers
  - kubernetesenvs
  - kuberneteses
  - listcheckers
  - listentries
  - logentries
  - memquotas
  - metrics
  - opas
  - prometheuses
  - quotas
  - quotaspecbindings
  - quotaspecs
  - rbacs
  - reportnothings
  - rules
  - servicecontrolreports
  - servicecontrols
  - solarwindses
  - stackdrivers
  - statsds
  - stdios
  verbs:
  - get
  - list
  - watch
- apiGroups: ["networking.istio.io"]
  resources:
  - destinationrules
  - gateways
  - serviceentries
  - virtualservices
  verbs:
  - get
  - list
  - watch
- apiGroups: ["authentication.istio.io"]
  resources:
  - policies
  - meshpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups: ["rbac.istio.io"]
  resources:
  - clusterrbacconfigs
  - rbacconfigs
  - serviceroles
  - servicerolebindings
  verbs:
  - get
  - list
  - watch
- apiGroups: ["apps.openshift.io"]
  resources:
  - deploymentconfigs
  verbs:
  - get
  - list
  - watch
- apiGroups: ["project.openshift.io"]
  resources:
  - projects
  verbs:
  - get
- apiGroups: ["route.openshift.io"]
  resources:
  - routes
  verbs:
  - get
- apiGroups: ["monitoring.kiali.io"]
  resources:
  - monitoringdashboards
  verbs:
  - get' ;
    helm template -n ${ISTIO_NAME} --namespace=istio-system ${VALUES} ${HELM_DIR}/istio
  ) | sed -e 's/^# Source:/# MAISTRA:/' \
    | sed -e 's/^# MAISTRA: \(istio\/charts\/kiali\)/# Source: \1/' \
    | sed -e '/^# MAISTRA:/,/^# Source:/ {
      /^# Source/ b
      /^# MAISTRA/ b
      d
    }' | sed -e 's/^# MAISTRA:/# Source:/' \
    | sed -e '/^# Source: istio\/charts\/kiali\/templates\/secrets.yaml/,/^# Source:/ {
      /^# Source/b
      d
    }'
}

# The following modifications are made to the upstream kiali configuration for deployment on OpenShift
# - Add jaeger and grafana URLs to the configmap as well as the identity certs
# - Add the route.openshift.io api group to the cluster role
# - Add the openshift annotation to the service
# - Remove the prometheus, grafana environment from the deployment
# - Add the kiali-cert volume mount
# - Add the kiali-cert volume
# - Add istio namespace to the configmap
# - Add rbac.istio.io to the ClusterRole
# - Add support for MeshPolicies
# - Add support for Kiali monitoring and dashboards
function transformKialiOpenShift() {
  sed -e '/^# Source: istio\/charts\/kiali\/templates\/configmap.yaml/,/^# Source:/ {
      /server:/ i\
\    istio_namespace: ISTIO_NAMESPACE
      /port: 20001/ a\
\      static_content_root_directory: /opt/kiali/console
      /jaeger:/,/url:/ {
        /url:/ s/$/JAEGER_URL/
      }
      /grafana:/,/url:/ {
        /url:/ s/$/GRAFANA_URL/
      }
  }' \
  | sed -e '/GRAFANA_URL/ a\
\    identity:\
\      cert_file: /kiali-cert/tls.crt\
\      private_key_file: /kiali-cert/tls.key' \
  | sed -e '/apiGroups:.*config.istio.io/ i\
\- apiGroups: ["project.openshift.io"]\
\  resources:\
\  - projects\
\  verbs:\
\  - get\
\- apiGroups: ["route.openshift.io"]\
\  resources:\
\  - routes\
\  verbs:\
\  - get\
\- apiGroups: [""]\
\  resources:\
\  - routes\
\  verbs:\
\  - get\
\- apiGroups: ["apps.openshift.io"]\
\  resources:\
\  - deploymentconfigs\
\  verbs:\
\  - get\
\  - list\
\  - watch\
\- apiGroups: ["monitoring.kiali.io"]\
\  resources:\
\  - monitoringdashboards\
\  verbs:\
\  - get\
\- apiGroups: ["rbac.istio.io"]\
\  resources:\
\  - clusterrbacconfigs\
\  - serviceroles\
\  - servicerolebindings\
\  verbs:\
\  - create\
\  - delete\
\  - get\
\  - list\
\  - patch\
\  - watch' \
  | sed -e '/kind.*Service$/,/metadata/ {
    /metadata/ a\
\  annotations:\
\    service.alpha.openshift.io/serving-cert-secret-name: kiali-cert-secret
  }' | sed -e '/SERVER_CREDENTIALS_USERNAME/,/volumeMounts/ {
    /volumeMounts/b
    d
  }' | sed -e '/kind.*Deployment$/,/^# Source:/ {
    /volumeMounts:/ {
      N
      N
      a\
\        - name: kiali-cert\
\          mountPath: "/kiali-cert"\
\        - name: kiali-secret\
\          mountPath: "/kiali-secret"
    }
    /configMap:/ {
      N
      a\
\      - name: kiali-cert\
\        secret:\
\          secretName: kiali-cert-secret\
\      - name: kiali-secret\
\        secret:\
\          secretName: \{\{ .Values.dashboard.secretName \}\}
    }
  }' | sed -e '/apiGroups:.*networking.istio.io/,/^-/ {
      /- watch/ a\
\- apiGroups: ["authentication.istio.io"]\
\  resources:\
\  - policies\
\  verbs:\
\  - create\
\  - delete\
\  - get\
\  - list\
\  - patch\
\  - watch\
\- apiGroups: ["monitoring.kiali.io"]\
\  resources:\
\  - monitoringdashboards\
\  verbs:\
\  - get
  }' | sed -e '/- policies/ a\
\  - meshpolicies'
}

retrieveIstioRelease

generateIstioTemplate values-redhat.yaml values-redhat-auth.yaml > ${ROLE_FILES_DIR}/istio-auth.yaml
generateIstioTemplate values-redhat.yaml > ${ROLE_FILES_DIR}/istio.yaml
generateCRDsTemplate values-redhat.yaml values-redhat-auth.yaml > ${ROLE_FILES_DIR}/istio-crds.yaml
generateGrafanaTemplate values-redhat-grafana.yaml > ${ROLE_FILES_DIR}/grafana.yaml
generateKialiTemplate values-redhat-kiali.yaml | transformKialiOpenShift > ${ROLE_FILES_DIR}/kiali.yaml
